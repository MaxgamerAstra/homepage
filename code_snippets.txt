## Kotlin: Small Calculator

fun main(){
    println("Erste Ziffer:")
    val erste = readln().toInt()

    println("Die gewünchte Operation (+|-|*|/):")
    val operator = readln().toString()
    
    println("Zweite Ziffer:")
    val zweite = readln().toInt()



    val ergebniss = when (operator) {
        "+" -> erste + zweite
        "-" -> erste - zweite
        "*" -> erste * zweite
        "/" -> if (erste != 0) erste / zweite else "Division durch 0"
        else -> "Ungültige Operation"
    }
        println("Dein Term lautet: $erste $operator $zweite = $ergebniss")
}

main()

## Python: Calculator (Also Part of my little project)




## Python: Terminate Function (Dependency of something comming here soon!)

from ANSI_Escape_Sequences import *

def beenden(nachricht, name, exit_code):
    print(f"\n{ROT}{nachricht}{RESET}")
    input(f'\n{GELB}***{ROT}{name}{GELB} drücke \'Enter\', um das Terminal zu beenden. ***{RESET}')
    exit(exit_code)

## Python: ASYN Escape Codes (Part of my little project)


SCHWARZ = '\033[30m'
ROT = '\033[31m'
GRÜN = '\033[32m'
GELB = '\033[33m' # orange in manchen betriebs systeme / orange on some devices
BLAU = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
HELL_GRAU = '\033[37m'
DUNKEL_GRAU = '\033[90m'
HELL_ROT = '\033[91m'
HELL_GRUN = '\033[92m'
HELL_GELB = '\033[93m'
HELL_BLAU = '\033[94m'
HELL_MAGENTA = '\033[95m'
HELL_CYAN = '\033[96m'
WEIß = '\033[97m'

RESET = '\033[0m' # restet zum standartterminalfarbe / resets terminal to the standart color used by the os


def main():
    print(SCHWARZ + "SCHWARZ" + RESET)
    print(ROT + "ROT" + RESET)
    print(GRÜN + "GRUN" + RESET)
    print(GELB + "GELB" + RESET)
    print(BLAU + "BLAU" + RESET)
    print(MAGENTA + "MAGENTA" + RESET)
    print(CYAN + "CYAN" + RESET)
    print(HELL_GRAU + "HELL GRAU" + RESET)
    print(DUNKEL_GRAU + "DUNKEL GRAU" + RESET)
    print(HELL_ROT + "HELL ROT" + RESET)
    print(HELL_GRUN + "HELL GRUN" + RESET)
    print(HELL_GELB + "HELL GELB" + RESET)
    print(HELL_BLAU + "HELL BLAU" + RESET)
    print(HELL_MAGENTA + "HELL MAGENTA" + RESET)
    print(HELL_CYAN + "HELL CYAN" + RESET)
    print(WEIß + "WEIß" + RESET)

if __name__ == "__main__":
    main()


## Python: Age Calculator


from datetime import datetime, date

# Define color codes for aesthetic purposes (using ANSI codes for terminal | may not work in all terminal versions idk why but if so just set all 4 variables to empty strings)
red = '\033[91m'
yellow = '\033[93m'
cyan = '\033[96m'
reset = '\033[0m'

# error/exit function
def exit_program(message):
    print()
    print(f'{red}{message}{reset}')
    print()
    input(f'{yellow}*** Press any key to exit the program. ***{reset}')
    exit(0)

# user input for birthdate
birthdate_str = input(
    f"{cyan}Please enter your birthdate for age calculation ({yellow}DD.MM.YYYY{cyan}): {reset}"
)
print()

# format birthdate to date object
try:
    birthdate = datetime.strptime(birthdate_str, "%d.%m.%Y").date()
except ValueError:
    exit_program("Error: Invalid date format.")

# calculate age
today = date.today()
age = today - birthdate

# functions to display age in days or weeks
def age_in_days():
    print(f"{cyan}You are {red}{age.days}{cyan} days old.{reset}")

def age_in_weeks():
    weeks = age.days // 7
    print(f"{cyan}You are approximately {red}{weeks}{cyan} weeks old.{reset}")

# ask the user for preferred format (days or weeks)
age_days_weeks = input(f"{cyan}Do you want to know your age in days or weeks? ({yellow}Days/Weeks{cyan}): {reset}")

if "d" in age_days_weeks.lower():
    age_in_days()
    exit_program("You got your answer!")
elif "w" in age_days_weeks.lower():
    age_in_weeks()
    exit_program("You got your answer!")
else:
    print(f"{red}Invalid choice!{reset}")
    exit_program("Program ended.")

## Python: List Comprehension 


numbers = [1, 2, 3, 4, 5]
squares = [x**2 for x in numbers]
print(squares)  # Output: [1, 4, 9, 16, 25]
#
